"use client";
import { useState } from 'react';


function generateBoundary() {
  return '---------------------------' + Math.random().toString(36).substring(2, 15);
}

export default function login({ realTimePageReloader }) {

  const [loginData, setLoginData] = useState({
    email: "",
    password: "",
  });


  const handleLogin = async () => {
    try {
      const formData = new FormData();
      formData.append('email', loginData.email);
      formData.append('password', loginData.password);
      const boundary = generateBoundary();
      const headers = {
        'Content-Type': `multipart/form-data; boundary=${boundary}`,
      };

      const getResponse = await fetch('/api/login', {
        method: 'POST',
        // headers: {
        //   'content-type': 'application/json',
        //   'Accept': '*/*',
        // },
        headers,
        // body: JSON.stringify(loginData),
        body: formData,
      });
      const data = await getResponse.json();

      if (data.success==true) {
        alert(data.message1);
      } else {
        alert(data.message1);
      }
    } catch (error) {
      console.error('Login failed', error);
    }
  };


  return (
    <>
      <h1>Login</h1>
      <div>
        <label>Email:</label>
        <input
          type="email"
          value={loginData.email}
          onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}
        />
      </div>
      <div>
        <label>Password:</label>
        <input
          type="password"
          value={loginData.password}
          onChange={(e) => setLoginData({ ...loginData, password: e.target.value})}
        />
      </div>

      <button onClick={handleLogin}>Login</button>

      <span onClick={() => realTimePageReloader()}>About Us</span>
    </>
  );
}



    // return (
    //   <>
    //     <span onClick={()=>realTimePageReloader()}>About Us</span>
    //   </>
    // );
  
  




// const Login = () => {
//   const router = useRouter();
//   const [email, setEmail] = useState('');
//   const [password, setPassword] = useState('');

//   const handleLogin = async () => {
//     // Implement your authentication logic here
//     // For example, you can use fetch to send login details to your backend API
//     try {
//       const response = await fetch('/api/login', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({ email, password }),
//       });

//       if (response.ok) {
//         router.push('/dashboard'); // Redirect to dashboard on successful login
//       } else {
//         // Handle login error
//         console.error('Login failed');
//       }
//     } catch (error) {
//       console.error('Login failed', error);
//     }
//   };

//   return (
//     <div>
//       <h1>Login</h1>
//       <div>
//         <label>Email:</label>
//         <input
//           type="email"
//           value={email}
//           onChange={(e) => setEmail(e.target.value)}
//         />
//       </div>
//       <div>
//         <label>Password:</label>
//         <input
//           type="password"
//           value={password}
//           onChange={(e) => setPassword(e.target.value)}
//         />
//       </div>
//       <button onClick={handleLogin}>Login</button>
//     </div>
//   );
// };













// pages/api/login.js
import multiparty from 'multiparty';
import dbConnection from './dbConfig/db';
import { isValidEmail, comparePasswords } from './dbConfig/function';



export const config = {
  api: {
    bodyParser: false, // Disable the default body parser
  },
};


export default async function login(req, res) {
  if (req.method === 'POST') {
    try {

        const contentType = req.headers['content-type'];

        if (contentType.includes('application/json')) {
          // Handle JSON request
          const { email, password } = req.body;
          
          await handleLogin(email, password, res);

        } else if (contentType.startsWith('multipart/form-data')) {

          const form = new multiparty.Form();
          // Handle form data
          form.parse(req, async (error, fields) => {
            if (error) {
              console.error('Error parsing form data:', error);
              return res.status(500).json({ message: 'Internal Server Error', error: error.message });
            }
              const email =  fields.email[0];
              const password = fields.password[0];
              console.log('email:', email);
              await handleLogin(email, password, res);
           });

        } else {
          return res.status(400).json({
            success: false,
            response: 112,
            message1: 'INVALID REQUEST FORMAT!',
            message2: 'Unsupported content type. Use JSON or form-data.',
          });
        }
     
    } catch (error) {
      console.error('Error handling login request:', error);
      res.status(500).json({ message: 'Internal Server Error', error: error.message });
    }
  } else {
    res.status(405).json({ message: 'Method Not Allowed' });
  }
}




async function handleLogin(email, password, res) {
  const connection = await dbConnection.getConnection();
  try {
    connection.release();
             // Check if fullname or email is an empty string
             if (email == '' || password == '') {

              connection.release();
              return res.status(400).json({
                success: false,
                response: 106,
                message1: 'ERROR!',
                message2: 'Fill all fields to continue',
              });
  
            } else {
  
              if (!isValidEmail(email)) {
  
                connection.release();
                return res.status(400).json({
                  success: false,
                  response: 107,
                  message1: 'EMAIL ERROR!',
                  message2: 'Check your email or sign up',
                });
  
              } else {
  
                const [getUser] = await connection.query('SELECT user_id,status_id,password FROM user_tab WHERE email = ?', [email]);
  
                if (getUser.length > 0) {
  
                  const statusId = getUser[0].status_id;
                  const userId = getUser[0].user_id;
                  const dbHashedPassword = getUser[0].password;
  
                  const isPasswordMatch = await comparePasswords(String(password), String(dbHashedPassword));
  
                  if (isPasswordMatch) {
  
                    if (statusId == 1) {
  
                      connection.release();
                      return res.status(400).json({
                        success: true,
                        response: 108,
                        user_id: userId,
                        message1: 'SUCCESSFUL!',
                        message2: 'Redireting to the portal...',
                      });
  
                    } else if (statusId == 2) {
  
                      connection.release();
                      return res.status(400).json({
                        success: false,
                        response: 109,
                        message1: 'USER SUSPENDED!',
                        message2: 'Contact admin for help',
                      });
  
                    } else {
  
                      connection.release();
                      return res.status(400).json({
                        success: false,
                        response: 110,
                        message1: 'USER UNDER REVIEWED!',
                        message2: 'Contact admin for help.',
                      });
                    }
  
                  } else {
  
                    connection.release();
                    return res.status(400).json({
                      success: false,
                      response: 111,
                      message1: 'INVALID LOGIN PARAMETERS!',
                      message2: 'Check email or password to continue.',
                    });
                  }
  
                } else {
  
                  connection.release();
                  return res.status(400).json({
                    success: false,
                    response: 111,
                    message1: 'INVALID LOGIN PARAMETERS!',
                    message2: 'Check email or password to continue.',
                  });
  
                }
              }
            }
  } catch (error) {
    console.error('Error handling login request:', error);
   
    res.status(500).json({ message: 'Internal Server Error', error: error.message });
  }
}




// export const config = {
//   api: {
//     bodyParser: false, // Disable the default body parser
//   },
// };
// export default async function login(req, res) {
//   if (req.method === 'POST') {
//     const contentType = req.headers['content-type'];

//     try {
//       const connection = await dbConnection.getConnection();

//       if (contentType === 'application/json') {

//         const { email, password } = req.body;

//         const [getUser] = await connection.execute('SELECT user_id, status_id, password FROM user_tab WHERE email = ?', [email]);
//         connection.release();
//         if (!isValidEmail(email)) {

//           connection.release();
//           return res.status(400).json({
//             success: false,
//             response: 107,
//             message1: 'INVALID LOGIN PARAMETERS!',
//             message2: 'Check email or password to continue.',
//           });

//         }
//         if (getUser.length > 0) {
//           const dbHashedPassword = getUser[0].password;
//           const userId = getUser[0].user_id;
//           const statusId = getUser[0].status_id;
//           const isPasswordMatch = await comparePasswords(String(password), String(dbHashedPassword));

//           console.error('statusId', statusId);
//           if (isPasswordMatch) {
//             if (statusId == 1) {
//               return res.status(200).json({
//                 success: true,
//                 response: 108,
//                 user_id: userId,
//                 message1: 'SUCCESSFUL!',
//                 message2: 'Redirecting to the portal...',
//               });
//             } else if (statusId == 2) {
//               return res.status(400).json({
//                 success: false,
//                 response: 109,
//                 message1: 'USER SUSPENDED!',
//                 message2: 'Contact admin for help',
//               });
//             } else {
//               return res.status(400).json({
//                 success: false,
//                 response: 110,
//                 message1: 'USER UNDER REVIEW!',
//                 message2: 'Contact admin for help.',
//               });
//             }
//           } else {
//             return res.status(400).json({
//               success: false,
//               response: 111,
//               message1: 'INVALID LOGIN PARAMETERS!',
//               message2: 'Check email or password to continue.',
//             });
//           }
//         } else {
//           return res.status(400).json({
//             success: false,
//             response: 111,
//             message1: 'INVALID LOGIN PARAMETERS!',
//             message2: 'Check email or password to continue.',
//           });
//         }
//       } else if (contentType.startsWith('multipart/form-data')) {
//         // Handle form data using multiparty
//         const form = new multiparty.Form();

//         form.parse(req, async (error, fields) => {
//           if (error) {
//             console.error('Error parsing form data:', error);
//             return res.status(500).json({ message: 'Internal Server Error', error: error.message });
//           }

         
//           const email = fields.email;
//           const password = fields.password;

//           // Check if fullname or email is an empty string
//           if (email == '' || password == '') {

//             connection.release();
//             return res.status(400).json({
//               success: false,
//               response: 106,
//               message1: 'ERROR!',
//               message2: 'Fill all fields to continue',
//             });

//           } else {

//             if (!isValidEmail(email)) {

//               connection.release();
//               return res.status(400).json({
//                 success: false,
//                 response: 107,
//                 message1: 'INVALID LOGIN PARAMETERS!',
//                 message2: 'Check email or password to continue.',
//               });

//             } else {

//               const [getUser] = await connection.query('SELECT user_id,status_id,password FROM user_tab WHERE email = ?', [email]);

//               if (getUser.length > 0) {

//                 const statusId = getUser[0].status_id;
//                 const userId = getUser[0].user_id;
//                 const dbHashedPassword = getUser[0].password;

//                 const isPasswordMatch = await comparePasswords(String(password), String(dbHashedPassword));

//                 if (isPasswordMatch) {

//                   if (statusId == 1) {

//                     connection.release();
//                     return res.status(400).json({
//                       success: true,
//                       response: 108,
//                       user_id: userId,
//                       message1: 'SUCCESSFUL!',
//                       message2: 'Redireting to the portal...',
//                     });

//                   } else if (statusId == 2) {

//                     connection.release();
//                     return res.status(400).json({
//                       success: false,
//                       response: 109,
//                       message1: 'USER SUSPENDED!',
//                       message2: 'Contact admin for help',
//                     });

//                   } else {

//                     connection.release();
//                     return res.status(400).json({
//                       success: false,
//                       response: 110,
//                       message1: 'USER UNDER REVIEWED!',
//                       message2: 'Contact admin for help.',
//                     });
//                   }

//                 } else {

//                   connection.release();
//                   return res.status(400).json({
//                     success: false,
//                     response: 111,
//                     message1: 'INVALID LOGIN PARAMETERS!',
//                     message2: 'Check email or password to continue.',
//                   });
//                 }

//               } else {

//                 connection.release();
//                 return res.status(400).json({
//                   success: false,
//                   response: 111,
//                   message1: 'INVALID LOGIN PARAMETERS!',
//                   message2: 'Check email or password to continue.',
//                 });

//               }
//             }
//           }
//         });
//       } else {
//         return res.status(400).json({
//           success: false,
//           response: 112,
//           message1: 'INVALID REQUEST FORMAT!',
//           message2: 'Unsupported content type. Use JSON or form-data.',
//         });
//       }
//     } catch (error) {
//       console.error('Error handling login request:', error);
//       res.status(500).json({ message: 'Internal Server Error', error: error.message });
//     }
//   } else {
//     res.status(405).json({ message: 'Method Not Allowed' });
//   }
// }


